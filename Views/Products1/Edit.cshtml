@model PressFitApi.Models.Product

@{
    ViewBag.Title = "Edit";
}



<script>




    $(document).ready(function () {


        $('#ImageUpload').change(ValidateImageFileUpload);
        $('#PdfUpload').change(ValidatePdfFileUpload);
        $('#PrintPdfUpload').change(ValidatePrintPdfFileUpload);
        //$('#btnSubmit').click(ShowMessage);

        $("#fileName").change(function () {
            ShowRequired();
        });

    });

    function Broadcast(msg) {
        if (msg) {
            document.getElementById('hiddenValue').value = true;
            //$("#editForm").submit();
            return true;
        } else {
            document.getElementById('hiddenValue').value = false;
            //$("#editForm").submit();
            return true;
        }

    }

    function ShowMessage() {
        $('#myModal').modal('toggle');

        return true;
    }

    function CheckPdfValidation() {
        var printPdf = document.getElementById('hiddenPrintPdfValue').value;
        var pdf = document.getElementById('hiddenPdfValue').value;

        if (printPdf && (pdf == "false")) {
            //ShowRequired();
            //$("#PdfUpload").prop('required', true);
            $('#PdfUpload').after('<div class="text-danger" id="errMsg">Pdf is Required</div>');
            $("#PdfUpload").prop('required', true);
            return false;
        } else if (pdf && (printPdf == "false")) {
            $('#PrintPdfUpload').after('<div class="text-danger" id="errMsg">Pdf is Required</div>');
            $("#PrintPdfUpload").prop('required', true);
            //ShowMessage();
            return false;
        }
        else if (printPdf && pdf) {
            //ShowMessage();
        }
        
        //return true;
    }

    function ShowRequired() {
        $("#ImageUpload").prop('required', true);
        $("#PdfUpload").prop('required', true);


        return true;
    }


    //function ShowMessage() {
    //    if (document.getElementById('hiddenValue').value == "true") {
    //        // dialog show
    //        $('#myModal').modal('toggle');
    //        var result = confirm("Do you want to broadcast text ?");
    //        if (result) {
    //            //document.getElementById('hiddenValue').value = true;
    //            return true;
    //        } else {
    //            document.getElementById('hiddenValue').value = false;
    //            return true;
    //        }
    //        return true;
    //    }
    //    return true;
    //}

    function ValidatePdfFileUpload() {
        $("#errMsg").hide();
        
        var fuData = document.getElementById('PdfUpload');
        var FileUploadPath = fuData.value;

        var size = parseFloat($("#PdfUpload")[0].files[0].size / 1024 / 1024).toFixed(2);

        if (size > 20) {
            document.getElementById("PdfUpload").value = "";
            alert("Please upload a Pdf with max size 20mb");
        }

        //To check if user upload any file

        if (FileUploadPath == '') {
            alert("Please upload an Pdf");
        } else {
            var Extension = FileUploadPath.substring(
                FileUploadPath.lastIndexOf('.') + 1).toLowerCase();
            //The file uploaded is an image
            if (Extension == "pdf") {

                if (fuData.files && fuData.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#blah').attr('src', e.target.result);
                    }
                    reader.readAsDataURL(fuData.files[0]);
                    document.getElementById('hiddenPdfValue').value = true;
                    ShowMessage();
                    CheckPdfValidation();
                }
            }
            else {
                document.getElementById("PdfUpload").value = "";
                alert(" only allows file types of pdf format");
                

            }

        }

    }


    function ValidatePrintPdfFileUpload() {

        $("#errMsg").hide();
        var fuData = document.getElementById('PrintPdfUpload');
        var FileUploadPath = fuData.value;

        var size = parseFloat($("#PrintPdfUpload")[0].files[0].size / 1024 / 1024).toFixed(2);

        if (size > 20) {
            document.getElementById("PrintPdfUpload").value = "";
            alert("Please upload a Pdf with max size 20mb");
        }

        //To check if user upload any file

        if (FileUploadPath == '') {
            alert("Please upload an Pdf");
        } else {
            var Extension = FileUploadPath.substring(
                FileUploadPath.lastIndexOf('.') + 1).toLowerCase();
            //The file uploaded is an image
            if (Extension == "pdf") {

                if (fuData.files && fuData.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#blah').attr('src', e.target.result);
                    }
                    reader.readAsDataURL(fuData.files[0]);
                    document.getElementById('hiddenPrintPdfValue').value = true;
                    //ShowMessage();
                    CheckPdfValidation();
                }
            }
            else {
                document.getElementById("PrintPdfUpload").value = "";
                alert(" only allows file types of pdf format");

            }

        }

    }
    function ValidateImageFileUpload() {
        var fuData = document.getElementById('ImageUpload');
        var FileUploadPath = fuData.value;

        var size = parseFloat($("#ImageUpload")[0].files[0].size / 1024 / 1024).toFixed(2);
        if (size > 2) {
            document.getElementById("ImageUpload").value = "";
            alert("Please upload a Image with max size 2mb");
        }

        //To check if user upload any file

        if (FileUploadPath == '') {
            alert("Please upload an image");
        } else {
            var Extension = FileUploadPath.substring(
                FileUploadPath.lastIndexOf('.') + 1).toLowerCase();
            //The file uploaded is an image
            if (Extension == "png" || Extension == "jpeg" || Extension == "jpg") {

                if (fuData.files && fuData.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#blah').attr('src', e.target.result);
                    }
                    reader.readAsDataURL(fuData.files[0]);
                }
            }
            else {
                document.getElementById("ImageUpload").value = "";
                alert("Photo only allows file types of PNG, JPG,and JPEG. ");
            }

        }

    }
</script>

<h2>Edit</h2>



@using (Html.BeginForm("Edit", "Products1", FormMethod.Post, new { enctype = "multipart/form-data", name = "editForm", id = "editForm" }))
{
    @Html.AntiForgeryToken()
    <div class="form-horizontal">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Id)

        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.SearchTags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SearchTags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SearchTags, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-2 hide" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FileName, new { htmlAttributes = new { @class = "form-control hide", id = "fileName" } })
                @Html.ValidationMessageFor(model => model.FileName, "", new { @class = "text-danger" })
                @*var fileValue= @Model.FileName.ToString()*@
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Image Upload</label>

            <div class="col-md-10">
                <input type="file" name="ImageUpload" id="ImageUpload" accept="image/x-png,image/jpeg" /><br />
                @Html.ValidationMessageFor(x => x.ImageUpload, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Pdf Upload</label>

            <div class="col-md-10">
                <input value="false" id="hiddenPdfValue" name="hiddenPdfValue" type="hidden">
                <input type="file" name="PdfUpload" id="PdfUpload" accept="application/pdf" /><br />
                @Html.ValidationMessageFor(x => x.PdfUpload, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Print Pdf Upload</label>
            @*@Html.LabelFor(model => model.CreatedDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                <input value="false" id="hiddenPrintPdfValue" name="hiddenPrintPdfValue" type="hidden">
                <input type="file" name="PrintPdfUpload" id="PrintPdfUpload" accept="application/pdf" /><br />
                @Html.ValidationMessageFor(x => x.PrintPdfUpload, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
                <label class="control-label col-md-2">Mobile Uploaded</label>

                <div class="col-md-10">
                    @Html.CheckBoxFor(x => x.IsMobileUploaded)
                </div>
            </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PriorityNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @{var maxvalue = @Model.PriorityNumber; }

                @*@if (maxvalue == int.MaxValue)
                    {

                        <input type="number" class="form-control" name="PriorityNumber" id="PriorityNumber" type="text" value="1000" />
                    }
                    else
                    {*@
                @Html.EditorFor(model => model.PriorityNumber, new { htmlAttributes = new { @class = "form-control" } })
                @*}*@
                @Html.ValidationMessageFor(model => model.PriorityNumber, "", new { @class = "text-danger" })
            </div>
        </div>
        @* modal *@
        <div class="modal" id="myModal">
            <div class="modal-dialog">
                <div class="modal-content">

                    <!-- Modal Header -->
                    <!-- Modal body -->
                    <div class="modal-body">
                        <h4>Do you want to broadcast ?</h4>
                        <button type="button" class="close" data-dismiss="modal">&times;</button><br />
                        <button type="button" class="btn btn-primary" id="yesBtn" onclick="Broadcast(1)" data-dismiss="modal">Yes</button>
                        <button type="button" class="btn btn-primary" id="noBtn" onclick="Broadcast(0)" data-dismiss="modal">No</button>
                    </div>

                    <!-- Modal footer -->
                    <div class="modal-footer">

                    </div>

                </div>
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                @*<input type="submit" id="submitButton" value="Save" class="btn btn-default" />*@
                <input value="false" id="hiddenValue" name="hiddenValue" type="hidden">
                @*   <input type="button" value="Save" class="btn btn-default" id="btnSubmit" />*@

                <input type="submit" value="Save" class="btn btn-default" id="btnSubmit" />

                @*<button type="button" id="btnClick" class="btn btn-primary" data-toggle="modal" data-target="#myModal">
                        Open modal
                    </button>*@
                @*<button type="button" id="btnClick" class="btn btn-primary">
                        Open modal
                    </button>*@
            </div>
        </div>
    </div>


                    }

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {

    @Scripts.Render("~/bundles/jqueryval")
    @Styles.Render("~/Content/themes/base")
    @Scripts.Render("~/bundles/jqueryui")
}
