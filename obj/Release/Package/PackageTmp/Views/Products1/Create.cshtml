@model PressFitApi.Models.Product

@{
    ViewBag.Title = "Create";
}
<script>

    $(document).ready(function () {
        $('#ImageUpload').change(ValidateImageFileUpload);
        $('#PdfUpload').change(ValidatePdfFileUpload);

    });




    function ValidatePdfFileUpload() {
        var fuData = document.getElementById('PdfUpload');
        var FileUploadPath = fuData.value;

        var size = parseFloat($("#PdfUpload")[0].files[0].size / 1024 / 1024).toFixed(2);

        if (size > 20) {
            document.getElementById("PdfUpload").value = "";
            alert("Please upload a Pdf with max size 20mb");
        }

        //To check if user upload any file

        if (FileUploadPath == '') {
            alert("Please upload an Pdf");
        } else {
            var Extension = FileUploadPath.substring(
                FileUploadPath.lastIndexOf('.') + 1).toLowerCase();
            //The file uploaded is an image
            if (Extension == "pdf") {

                if (fuData.files && fuData.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#blah').attr('src', e.target.result);
                    }
                    reader.readAsDataURL(fuData.files[0]);
                }
            }
            else {
                document.getElementById("PdfUpload").value = "";
                alert(" only allows file types of pdf format");

            }

        }

    }


    function ValidateImageFileUpload() {
        var fuData = document.getElementById('ImageUpload');
        var FileUploadPath = fuData.value;

        var size = parseFloat($("#ImageUpload")[0].files[0].size / 1024 / 1024).toFixed(2);
        if (size > 2) {
            document.getElementById("ImageUpload").value = "";
            alert("Please upload a Image with max size 2mb");
        }

        //To check if user upload any file

        if (FileUploadPath == '') {
            alert("Please upload an image");
        } else {
            var Extension = FileUploadPath.substring(
                FileUploadPath.lastIndexOf('.') + 1).toLowerCase();
            //The file uploaded is an image
            if (Extension == "png" || Extension == "jpeg" || Extension == "jpg") {

                if (fuData.files && fuData.files[0]) {
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        $('#blah').attr('src', e.target.result);
                    }
                    reader.readAsDataURL(fuData.files[0]);
                }
            }
            else {
                document.getElementById("ImageUpload").value = "";
                alert("Photo only allows file types of PNG, JPG,and JPEG. ");
            }

        }

    }
</script>


@using (Html.BeginForm("Create", "Products1", FormMethod.Post, new { enctype = "multipart/form-data" }))
{

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h2>Product</h2>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.SearchTags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.SearchTags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SearchTags, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.FileName, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.FileName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.FileName, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Image Upload</label>
            @*@Html.LabelFor(model => model.ModifiedDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                <input type="file" name="ImageUpload" id="ImageUpload" accept="image/x-png,image/jpeg" /><br />
                @Html.ValidationMessageFor(x => x.ImageUpload, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label class="control-label col-md-2">Pdf Upload</label>
            @*@Html.LabelFor(model => model.CreatedDate, htmlAttributes: new { @class = "control-label col-md-2" })*@
            <div class="col-md-10">
                <input type="file" name="PdfUpload" id="PdfUpload" accept="application/pdf" /><br />
                @Html.ValidationMessageFor(x => x.PdfUpload, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PriorityNumber, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">

                <input type="number" class="form-control" name="PriorityNumber" id="PriorityNumber" type="text" value="1000" />


                @Html.ValidationMessageFor(model => model.PriorityNumber, "", new { @class = "text-danger" })
            </div>
        </div>


        @*<div class="form-group">
                <label class="control-label col-md-2">High Priority</label>
                <div class="col-md-10">
                    @Html.CheckBoxFor(x => x.HighPriority)
                </div>
            </div>*@

        @*<div class="form-group">
            <label class="control-label col-md-2">High Priority</label>
            <div class="col-md-10">
                @Html.CheckBoxFor(x => x.HighPriority)
            </div>
        </div>*@



        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
